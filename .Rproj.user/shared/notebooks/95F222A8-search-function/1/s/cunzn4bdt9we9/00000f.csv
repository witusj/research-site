"0","## Global variables"
"0",""
"0","cts = np.array([0, 1]) # client types -> normal or emergency"
"0","pct = np.array([1, 0]) # distribution of client types -> normal or emergency"
"0","# sts = np.array([14, 14, 14, 15, 16]) # service times - for simple numerical testing"
"0","# sts = np.random.poisson(lam=14, size=1000) - using poisson distribution"
"0",""
"0","nsh = 0.1 # percentage of no-shows"
"0","nsims = 100000 # number of simulations"
"0","logs = False # do not print simulation logs"
"0","lnm = 14 # lognormal mean"
"0","lns = 5 # lognormal standard deviation"
"0","nm = fn.logn_mean_lns(lnm, lns)[0] # normal mean"
"0","ns = fn.logn_mean_lns(lnm, lns)[1] # normal standard deviation"
"0","d = 10 # interval time"
"0","T = 12 # number of intervals"
"0","sts = fn.generate_logn_sts(1, 10000, lnm, lns)[0] # sampling population for service times"
"0","sim = np.zeros(T) "
"0","i = np.arange(T, step=2)"
"0","sim[i] = 1"
"0","sim[-1] = 1"
"0","sim[0] = 2 "
"0","sim = sim.astype(int) # initial schedule"
"0","N = np.sum(sim)"
"0",""
"0","ctsm = np.random.choice(cts, size = (nsims * N), p=pct).reshape((nsims, N)) # client types matrix"
"0","stsm = np.random.lognormal(mean = nm, sigma=ns, size=(nsims * N)).reshape(nsims, N) # service times matrix"
"0","nsm = np.random.binomial(n=1, p=1-ns, size = (nsims * N)).reshape(nsims, N) # no-shows matrix"
"0","stsm = stsm * nsm # service times matrix with no-shows"
"0",""
