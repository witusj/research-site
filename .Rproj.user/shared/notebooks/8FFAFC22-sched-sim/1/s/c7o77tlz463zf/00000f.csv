"0",""
"0","## Functions"
"0",""
"0","### Lognormal mean and lns / see: https://en.wikipedia.org/wiki/Log-normal_distribution"
"0",""
"0","def logn_mean_lns(lnm, lns):"
"0","  sigma = np.sqrt(np.log(1 + (lns/lnm)**2))"
"0","  mu = np.log(lnm**2 / np.sqrt(lnm**2 + lns**2))"
"0","  return np.array([mu, sigma])"
"0",""
"0","### Random lognormal service times generator"
"0","def generate_logn_sts(s, n, lnm, lns):"
"0","  sts = np.random.lognormal(mean = logn_mean_lns(lnm, lns)[0], sigma=logn_mean_lns(lnm, lns)[1], size=s * n)"
"0","  return np.reshape(sts, (s, n))"
"0",""
"0","##############"
"0","#### TEST ####"
"0","generate_logn_sts(5, 5, 14, 10)"
"1","array([[10.73458603, 11.22320879, 13.74510896,  5.78709531,  7.79941781],
       [31.86367865,  9.37156687,  5.69250366,  8.45588467,  5.92554036],
       [ 2.87154644,  8.70877418,  9.12798072, 30.2767305 ,  6.08126691],
       [25.31175983,  8.7849525 , 16.8614358 , 14.84117814, 22.21118822],
       [ 9.35588553, 20.66805344, 10.97868654,  5.16879991, 24.89154564]])
"
"0","generate_logn_sts(1, 8, 14, 10)"
"1","array([[10.56073005, 78.58249445, 15.91933354,  8.79089975,  8.77732432,
         6.7505234 , 40.58681789, 12.09604104]])
"
"0","##############"
"0",""
"0","### Client generator"
"0","def generate_client(cts, sts, pct, ns=0):"
"0","  ct = np.random.choice(cts, size = 1, p=pct)[0] # generate random client type"
"0","  st = np.random.binomial(n=1, p=1-ns)*np.random.choice(sts, size = 1)[0] # generate random service time / if no-show -> st = 0"
"0","  return np.array([ct, st])"
"0",""
"0","### Simulation"
"0",""
"0","def simulate(iats, cts, sts, pct, ns, logs=False):"
"0","  wt = 0 # initial value waiting time"
"0","  wts = [] # array for saving waiting times"
"0","  for i in range(len(iats)):"
"0","    if(i != 0): # don't calculate waiting time for first client in schedule"
"0","      wt = max(0, tis - iats[i]) # calculate waiting time"
"0","    ct, st = generate_client(cts, sts, pct, ns) # client type and service time"
"0","    tis = wt + st # calculate time in system"
"0","    wts.append(wt)"
"0","    if(logs): print(iats[i], wt, st, tis, ct)"
"0","  return np.array(wts)"
"0",""
"0","def simulate_crn(iats, cts, sts, logs=False):"
"0","  wt = 0 # initial value waiting time"
"0","  wts = [] # array for saving waiting times"
"0","  for i in range(len(iats)):"
"0","    if(i != 0): # don't calculate waiting time for first client in schedule"
"0","      wt = max(0, tis - iats[i]) # calculate waiting time"
"0","    ct =  cts[i]# client type"
"0","    st =  sts[i]# service time"
"0","    tis = wt + st # calculate time in system"
"0","    wts.append(wt)"
"0","    if(logs): print(iats[i], wt, st, tis, ct)"
"0","  return np.array(wts)"
"0",""
"0","def transform_iats_schedule(iats: list, d: int, T: int):"
"0","  iats = np.array(iats)"
"0","  ats = np.cumsum(iats)"
"0","  sats = np.arange(d*(T+1),step = d)"
"0","  schedule = np.histogram(ats, bins=sats)"
"0","  return schedule"
"0",""
"0","##############"
"0","#### TEST ####"
"0","transform_iats_schedule([0, 0 ,30, 0, 60, 0, 0, 0, 60, 0, 0, 0], d = 15, T = 11)"
"1","(array([2, 0, 2, 0, 0, 0, 4, 0, 0, 0, 4]), array([  0,  15,  30,  45,  60,  75,  90, 105, 120, 135, 150, 165]))
"
"0","##############"
"0",""
"0","def transform_schedule_iats(schedule: list, d: int):"
"0","  schedule = np.array(schedule)"
"0","  T = schedule.size"
"0","  sats = np.arange(d*T,step = d)"
"0","  ats = np.repeat(sats, schedule)"
"0","  iats = np.diff(ats)"
"0","  iats = np.insert(iats, 0, ats[0])"
"0","  return iats"
"0",""
"0","##############"
"0","#### TEST ####"
"0","schedule = transform_iats_schedule([0, 0 ,30, 0, 60, 0, 0, 0, 60, 0, 0, 0], d = 15, T = 11)[0]"
"0","transform_schedule_iats(schedule, d = 15)"
"1","array([ 0,  0, 30,  0, 60,  0,  0,  0, 60,  0,  0,  0])
"
"0","##############"
"0",""
"0",""
