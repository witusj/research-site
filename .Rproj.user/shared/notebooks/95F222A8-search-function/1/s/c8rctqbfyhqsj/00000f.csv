"0",""
"0","def distribute_elements(n, t):"
"0","    quotient, remainder = divmod(t, n-1)"
"0","    elements = np.zeros(t)"
"0","    for i in range(n-1):"
"0","        elements[i * quotient] = 1"
"0","    elements[0] = elements[0] + 1"
"0","    return elements"
"0","  "
"0","    "
"0","nsh = 0.1 # percentage of no-shows"
"0","nsims = 100000 # number of simulations"
"0","logs = False # do not print simulation logs"
"0","lnm = 20 # lognormal mean"
"0","lns = 5 # lognormal standard deviation"
"0","nm = fn.logn_mean_lns(lnm, lns)[0] # normal mean"
"0","ns = fn.logn_mean_lns(lnm, lns)[1] # normal standard deviation"
"0","d = 10 # interval time"
"0","T = 24 # number of intervals"
"0","N = 9 # number of patients"
"0","sts = fn.generate_logn_sts(1, 10000, lnm, lns)[0] # sampling population for service times"
"0","sim = distribute_elements(N, T)"
"0","sim = sim.astype(int) # initial schedule"
"0",""
"0","ctsm = np.random.choice(cts, size = (nsims * N), p=pct).reshape((nsims, N)) # client types matrix"
"0","stsm = np.random.lognormal(mean = nm, sigma=ns, size=(nsims * N)).reshape(nsims, N) # service times matrix"
"0","nsm = np.random.binomial(n=1, p=1-ns, size = (nsims * N)).reshape(nsims, N) # no-shows matrix"
"0","stsm = stsm * nsm # service times matrix with no-shows"
"0",""
