"0",""
"0",""""""""
"0","A schedule class with a constructor and a method to calculate the system states."
"0",""""""""
"1","'\nA schedule class with a constructor and a method to calculate the system states.\n'
"
"0","class Schedule:"
"0","    def __init__(self, x, d, s):"
"0","            # Initialize the parameters dictionary with x, d, and s."
"0","            self.parameters = dict({'x': x, 'd': d, 's': s})"
"0","            # Initialize the system dictionary with p_min and v."
"0","            self.system = dict({"
"0","                'p_min': np.zeros((len(self.parameters['x']), len(self.parameters['s'])), dtype=np.float64),"
"0","                'p_plus': np.zeros((len(self.parameters['x']), len(self.parameters['s'])), dtype=np.float64)"
"0","            })"
"0","            # Set the initial state to 0."
"0","            self.state = 0"
"0","            # Set the first element of p_min in the initial state to 1."
"0","            self.system['p_min'][self.state][0] = 1"
"0","            # Set the first row of v to s."
"0","            # self.system['v'][self.state] = convolve_n(self.parameters['s'].copy(), self.parameters['x'][self.state])[:(len(self.parameters['s']))]"
"0","            # Set p_plus to v."
"0","            # self.system['p_plus'] = self.system['v'].copy()"
"0","            # Initialize array of arrays for saving waiting times distributions per patient"
"0","            self.system['w'] = zero_arrays(self.parameters['x'].copy(), len(self.parameters['s']))"
"0","            if(self.parameters['x'][0] > 0): # Only calculate waiting times if there are patients scheduled in the state"
"0","                     self.system['w'][0][0] = self.system['p_min'][0].copy()"
"0","                     for i in range(1, self.parameters['x'][0]):"
"0","                            self.system['w'][0][i] = np.convolve(self.system['w'][0][i-1], self.parameters['s'])[:(len(self.parameters['s']))]"
"0","            self.system['p_plus'][0] = self.system['p_min'][0].copy() if self.parameters['x'][0] == 0 else np.convolve(self.system['w'][0][-1], self.parameters['s'])[:(len(self.parameters['s']))]"
"0","            # Initializ array for saving total expected waiting times per state"
"0","            self.system['ew'] = np.zeros(len(self.parameters['x']), dtype=np.float64)"
"0","        "
"0","    def calculate_system_states(self, until = 1):"
"0","            "
"0","            while self.state < until:"
"0","                """"""Set state to 1, because state 0 has already been calculated in the constructor."
"0","                """""""
"0","                "
"0","                self.state += 1"
"0","                "
"0","                """"""The probability that the amount of work left in the system equals zero just before state t starts is the probablity that the total amount work in state t-1 was less than or equal to the interval length d."""""""
"0","                "
"0","                self.system['p_min'][self.state][0] = np.sum(self.system['p_plus'][self.state-1][:(self.parameters['d'] + 1)])"
"0","                "
"0","                """"""The probability that the amount of work left in the system equals i just before state t starts is the probablity that the total amount work in state t-1 exceeded the interval length d with amount i."""""""
"0","                "
"0","                self.system['p_min'][self.state][1:(-1*self.parameters['d'])] = self.system['p_plus'][self.state-1][(self.parameters['d'] + 1):]"
"0","                "
"0","                """"""Service time distribution are calculated as n times convolutions, where n is the number of clients scheduled. The resulting vector is truncated to the length of the service time distribution."""""""
"0","                # self.system['v'][self.state] = convolve_n(self.parameters['s'].copy(), self.parameters['x'][self.state])[:(len(self.parameters['s']))]"
"0","                "
"0","                """"""The distribution of waiting times of the first patient in state t equals p_min. "
"0","                The distribution of waiting times of the second patient in state t equals the convolution of the distribution "
"0","                of waiting times of the first patient in state t and the service time distribution. "
"0","                The resulting vector is truncated to the length of the service time distribution."""""""
"0","                if(self.parameters['x'][self.state] > 0): # Only calculate waiting times if there are patients scheduled in the state"
"0","                     self.system['w'][self.state][0] = self.system['p_min'][self.state].copy()"
"0","                     for i in range(1, self.parameters['x'][self.state]):"
"0","                            self.system['w'][self.state][i] = np.convolve(self.system['w'][self.state][i-1], self.parameters['s'])[:(len(self.parameters['s']))]"
"0","                            "
"0","                "
"0","                "
"0","                """"""The probablitity that the amount of work left in the system equals i just before state t ends equals "
"0","                the convolution of the waiting time distribution of the last arriving patient and the service time distribution. "
"0","                Unless there are no patients in the state t. In that case the distributio of total work just before t ends is equal "
"0","                to the distribution of work at the beginning of t. "
"0","                The resulting vector is truncated to the length of the service time distribution."""""""
"0","                self.system['p_plus'][self.state] = self.system['p_min'][self.state].copy() if self.parameters['x'][self.state] == 0 else np.convolve(self.system['w'][self.state][-1], self.parameters['s'])[:(len(self.parameters['s']))]"
"0","    "
"0","    def calculate_wait_times(self, until = 1):"
"0","    # Initialize time counter"
"0","      t = 0"
"0","      # Calculate the expected waiting time for each time step"
"0","      for t, w in enumerate(self.system['w']):"
"0","          ew = 0"
"0","          for i in w:"
"0","              # Calculate the weighted sum of the waiting time distribution"
"0","              a = range(len(i))"
"0","              b = i"
"0","              wt = np.dot(a, b)"
"0","              ew += wt"
"0","          # Store the expected waiting time for the current time step"
"0","          self.system['ew'][t] = ew"
"0","        "
"0","        "
"0","    def visualize_state(self, state='', dist='p_plus'):"
"0","        """""""
"0","        Visualize a distribution in the last given state."
"0","        """""""
"0","        if state == '':"
"0","            state = self.state"
"0","        trace = go.Scatter("
"0","            x=list(range(len(self.system[dist][state]))),"
"0","            y=self.system[dist][state],"
"0","            mode='lines'"
"0","        )"
"0","        "
"0","        data = [trace]"
"0","        "
"0","        layout = go.Layout("
"0","            title=f'{dist} in state {state}',"
"0","            xaxis=dict(title='Time'),"
"0","            yaxis=dict(title='Probability')"
"0","        )"
"0","        "
"0","        fig = go.Figure(data=data, layout=layout)"
"0","        pyo.iplot(fig)"
"0","    "
"0","    def visualize_system(self, dist='p_plus'):"
"0","         "
"0","         values = self.system[dist]"
"0","         trace = go.Heatmap("
"0","                    z=values,"
"0","                    text=np.around(values, 2),"
"0","                    texttemplate=""%{text}"","
"0","                    textfont={""size"":10}"
"0","                    )"
"0","         data = [trace]"
"0","         "
"0","         layout = go.Layout("
"0","            title=f'{dist}',"
"0","            xaxis=dict(title='Time'),"
"0","            yaxis=dict(title='Probability')"
"0","        )"
"0","         fig = go.Figure(data=data, layout=layout)"
"0","         pyo.iplot(fig)"
"0","        "
"0","    def __str__(self):"
"0","        """""""
"0","        Print all probabilities"
"0","        """""""
"0","        return(""p_min = % s \nw = % s \np_plus = % s \new = % s"" % (self.system['p_min'], self.system['w'], self.system['p_plus'], self.system['ew']))"
"0",""
