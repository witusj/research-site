"0","def search_best_solution(x):"
"0","    obj_value = obj_function(x)"
"0","    "
"0","    # Keep track of the best solution found"
"0","    best_solution = x.copy()"
"0","    "
"0","    # Continue the search until no improvement is found"
"0","    while True:  # Start an outer loop that will continue until explicitly broken"
"0","        nh = generate_search_neighborhood(best_solution)  # Generate a new neighborhood"
"0","        improved = False  # Flag to check if an improvement was found in the inner loop"
"0","        "
"0","        for y in nh:  # Inner loop to search through the neighborhood"
"0","            c = obj_function(y)"
"0","            if c < obj_value:"
"0","                obj_value = c"
"0","                best_solution = y.copy()"
"0","                print(f'Found better schedule {best_solution} with objective value {obj_value}')"
"0","                improved = True  # Set the flag because an improvement was found"
"0","                break  # Exit the inner loop to generate a new neighborhood"
"0","        "
"0","        if not improved:  # If no improvement was found in the inner loop"
"0","            break  # Exit the outer loop - the search is complete"
"0","            "
"0","    return best_solution, obj_value"
"0","    "
"0","# Example usage:"
"0","x = [5, 0, 0, 0, 1]"
"0","initial_solution = x  # Replace this with your actual initial solution"
"0","best_solution, best_obj_value = search_best_solution(initial_solution)"
"1","The schedule = [5, 0, 0, 0, 1]
And the neighborhood is [[5. 0. 0. 0. 1.]
 [4. 0. 0. 0. 2.]
 [5. 0. 0. 1. 0.]
 [4. 0. 0. 1. 1.]
 [5. 0. 1. 0. 0.]
 [4. 0. 1. 0. 1.]
 [5. 1. 0. 0. 0.]
 [4. 1. 0. 0. 1.]
 [6. 0. 0. 0. 0.]
 [5. 0. 0. 0. 1.]]
Found better schedule [4. 0. 0. 0. 2.] with objective value 20.0
The schedule = [4. 0. 0. 0. 2.]
And the neighborhood is [[4. 0. 0. 0. 2.]
 [3. 0. 0. 0. 3.]
 [4. 0. 0. 1. 1.]
 [3. 0. 0. 1. 2.]
 [4. 0. 1. 0. 1.]
 [3. 0. 1. 0. 2.]
 [4. 1. 0. 0. 1.]
 [3. 1. 0. 0. 2.]
 [5. 0. 0. 0. 1.]
 [4. 0. 0. 0. 2.]]
Found better schedule [3. 0. 0. 0. 3.] with objective value 18.0
The schedule = [3. 0. 0. 0. 3.]
And the neighborhood is [[3. 0. 0. 0. 3.]
 [2. 0. 0. 0. 4.]
 [3. 0. 0. 1. 2.]
 [2. 0. 0. 1. 3.]
 [3. 0. 1. 0. 2.]
 [2. 0. 1. 0. 3.]
 [3. 1. 0. 0. 2.]
 [2. 1. 0. 0. 3.]
 [4. 0. 0. 0. 2.]
 [3. 0. 0. 0. 3.]]
Found better schedule [3. 0. 0. 1. 2.] with objective value 14.0
The schedule = [3. 0. 0. 1. 2.]
And the neighborhood is [[3. 0. 0. 1. 2.]
 [2. 0. 0. 1. 3.]
 [3. 0. 1. 0. 2.]
 [3. 0. 0. 2. 1.]
 [2. 0. 1. 0. 3.]
 [2. 0. 0. 2. 2.]
 [3. 1. 0. 0. 2.]
 [3. 0. 1. 1. 1.]
 [2. 1. 0. 0. 3.]
 [2. 0. 1. 1. 2.]
 [4. 0. 0. 0. 2.]
 [3. 1. 0. 1. 1.]
 [3. 0. 0. 0. 3.]
 [2. 1. 0. 1. 2.]
 [4. 0. 0. 1. 1.]
 [3. 0. 0. 1. 2.]]
Found better schedule [2. 0. 0. 2. 2.] with objective value 12.0
The schedule = [2. 0. 0. 2. 2.]
And the neighborhood is [[2. 0. 0. 2. 2.]
 [1. 0. 0. 2. 3.]
 [2. 0. 1. 1. 2.]
 [2. 0. 0. 3. 1.]
 [1. 0. 1. 1. 3.]
 [1. 0. 0. 3. 2.]
 [2. 1. 0. 1. 2.]
 [2. 0. 1. 2. 1.]
 [1. 1. 0. 1. 3.]
 [1. 0. 1. 2. 2.]
 [3. 0. 0. 1. 2.]
 [2. 1. 0. 2. 1.]
 [2. 0. 0. 1. 3.]
 [1. 1. 0. 2. 2.]
 [3. 0. 0. 2. 1.]
 [2. 0. 0. 2. 2.]]
Found better schedule [2. 0. 1. 1. 2.] with objective value 10.0
The schedule = [2. 0. 1. 1. 2.]
And the neighborhood is [[2. 0. 1. 1. 2.]
 [1. 0. 1. 1. 3.]
 [2. 1. 0. 1. 2.]
 [2. 0. 2. 0. 2.]
 [2. 0. 1. 2. 1.]
 [1. 1. 0. 1. 3.]
 [1. 0. 2. 0. 3.]
 [1. 0. 1. 2. 2.]
 [3. 0. 0. 1. 2.]
 [2. 1. 1. 0. 2.]
 [2. 1. 0. 2. 1.]
 [2. 0. 2. 1. 1.]
 [2. 0. 0. 1. 3.]
 [1. 1. 1. 0. 3.]
 [1. 1. 0. 2. 2.]
 [1. 0. 2. 1. 2.]
 [3. 0. 1. 0. 2.]
 [3. 0. 0. 2. 1.]
 [2. 1. 1. 1. 1.]
 [2. 0. 1. 0. 3.]
 [2. 0. 0. 2. 2.]
 [1. 1. 1. 1. 2.]
 [3. 0. 1. 1. 1.]
 [2. 0. 1. 1. 2.]]
Found better schedule [2. 1. 1. 1. 1.] with objective value 8.0
The schedule = [2. 1. 1. 1. 1.]
And the neighborhood is [[2. 1. 1. 1. 1.]
 [1. 1. 1. 1. 2.]
 [3. 0. 1. 1. 1.]
 [2. 2. 0. 1. 1.]
 [2. 1. 2. 0. 1.]
 [2. 1. 1. 2. 0.]
 [2. 0. 1. 1. 2.]
 [1. 2. 0. 1. 2.]
 [1. 1. 2. 0. 2.]
 [1. 1. 1. 2. 1.]
 [3. 1. 0. 1. 1.]
 [3. 0. 2. 0. 1.]
 [3. 0. 1. 2. 0.]
 [2. 2. 1. 0. 1.]
 [2. 2. 0. 2. 0.]
 [2. 1. 2. 1. 0.]
 [2. 1. 0. 1. 2.]
 [2. 0. 2. 0. 2.]
 [2. 0. 1. 2. 1.]
 [1. 2. 1. 0. 2.]
 [1. 2. 0. 2. 1.]
 [1. 1. 2. 1. 1.]
 [3. 1. 1. 0. 1.]
 [3. 1. 0. 2. 0.]
 [3. 0. 2. 1. 0.]
 [2. 2. 1. 1. 0.]
 [2. 1. 1. 0. 2.]
 [2. 1. 0. 2. 1.]
 [2. 0. 2. 1. 1.]
 [1. 2. 1. 1. 1.]
 [3. 1. 1. 1. 0.]
 [2. 1. 1. 1. 1.]]
"
"0","print(""Best solution found:"", best_solution)"
"1","Best solution found: [2. 1. 1. 1. 1.]
"
"0","print(""Objective value of the best solution:"", best_obj_value)"
"1","Objective value of the best solution: 8.0
"
