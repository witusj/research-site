"0","import numpy as np"
"0",""
"0","def service_time_with_no_shows(s, q):"
"0","  # """""""
"0","  # Function to adjust a distribution of service times for no-shows"
"0","  # "
"0","  # Args:"
"0","  #     s (numpy.ndarray): An array with service times."
"0","  #     q (double): The fraction of no-shows."
"0","  # "
"0","  # Returns:"
"0","  #     numpy.ndarray: The adjusted array of service times."
"0","  # """""""
"0","  "
"0","  s_adj = s * (1-q)"
"0","  s_adj[0] = s_adj[0] + q"
"0","  "
"0","  return(s_adj)"
"0","  "
"0","def calculate_rolling_convolution(s):"
"0","  conv_list = [1]"
"0","  conv_list = conv_list.append(s)"
"0","  # for i in range(1, limit):"
"0","  #   conv_list[i] = np.convolve(conv_list[i-1], s)"
"0","  #   print(i)"
"0","  return(conv_list)"
"0","  "
"0","    "
"0",""
